# chat_completion/models/tools.py
from dataclasses import dataclass
from typing import Literal
from .base import BaseModel


@dataclass
class Function(BaseModel):
    """Represents a function that the model called."""

    name: str
    arguments: str

    @classmethod
    def from_dict(cls, data: dict) -> "Function":
        return cls(name=data["name"], arguments=data["arguments"])


@dataclass
class ToolCall(BaseModel):
    """Represents a tool call generated by the model."""

    id: str
    type: Literal["function"]
    function: Function

    @classmethod
    def from_dict(cls, data: dict) -> "ToolCall":
        return cls(
            id=data["id"],
            type=data["type"],
            # Convert dict to Function instance
            function=Function.from_dict(data["function"]),
        )
